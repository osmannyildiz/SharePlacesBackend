{"version":3,"sources":["pages/Authenticate.js","components/form/ImagePicker.js"],"names":["Authenticate","authContext","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useForm","formState","inputHandler","setFormData","useHttpClient","sendRequest","isLoading","error","clearError","event","preventDefault","process","JSON","stringify","email","inputs","value","password","respData","login","data","userId","token","console","formData","FormData","append","name","image","undefined","Fragment","onCancel","asOverlay","className","onSubmit","type","label","validators","Validators","required","onInput","minLength","center","disabled","isValid","style","marginTop","inverse","onClick","ImagePicker","props","imageFile","setImageFile","previewUrl","setPreviewUrl","setIsValid","isTouched","setIsTouched","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","accept","display","ref","onChange","_imageFile","_isValid","target","files","length","previewWidth","width","src","alt","current","click"],"mappings":"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","file":"static/js/7.0faac229.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport Button from \"../components/form/Button\";\nimport ImagePicker from \"../components/form/ImagePicker\";\nimport Input from \"../components/form/Input\";\nimport ErrorModal from \"../components/ui/ErrorModal\";\nimport Spinner from \"../components/ui/Spinner\";\nimport AuthContext from \"../contexts/authContext\";\nimport useForm from \"../hooks/useForm\";\nimport useHttpClient from \"../hooks/useHttpClient\";\nimport { Validators } from \"../utils/validation\";\nimport \"./Authenticate.css\";\n\nexport default function Authenticate() {\n\tconst authContext = useContext(AuthContext);\n\n\tconst [isLoginMode, setIsLoginMode] = useState(true);\n\tconst [formState, inputHandler, setFormData] = useForm([\"email\", \"password\"]);\n\tconst [sendRequest, isLoading, error, clearError] = useHttpClient();\n\n\tconst switchMode = () => {\n\t\tif (!isLoginMode) {\n\t\t\t// Switching to login mode\n\t\t\tsetFormData(\n\t\t\t\t{\n\t\t\t\t\t...formState.inputs,\n\t\t\t\t\tname: undefined,\n\t\t\t\t\timage: undefined,\n\t\t\t\t},\n\t\t\t\tformState.inputs.email.isValid && formState.inputs.password.isValid\n\t\t\t);\n\t\t} else {\n\t\t\t// Switching to register mode\n\t\t\t// (Actually it still works if we omit this whole else block)\n\t\t\tsetFormData(\n\t\t\t\t{\n\t\t\t\t\t...formState.inputs,\n\t\t\t\t\tname: {\n\t\t\t\t\t\tvalue: \"\",\n\t\t\t\t\t\tisValid: false,\n\t\t\t\t\t},\n\t\t\t\t\timage: {\n\t\t\t\t\t\tvalue: null,\n\t\t\t\t\t\tisValid: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tfalse\n\t\t\t);\n\t\t}\n\t\tsetIsLoginMode((isLoginMode) => !isLoginMode);\n\t};\n\n\tasync function submitHandler(event) {\n\t\tevent.preventDefault();\n\t\tif (isLoginMode) {\n\t\t\ttry {\n\t\t\t\tconst respData = await sendRequest(\n\t\t\t\t\tprocess.env.REACT_APP_BACKEND_API_URL + \"/users/login\",\n\t\t\t\t\t\"POST\",\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t},\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\temail: formState.inputs.email.value,\n\t\t\t\t\t\tpassword: formState.inputs.password.value,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tauthContext.login(respData.data.userId, respData.data.token);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t} else {\n\t\t\tconst formData = new FormData();\n\t\t\tformData.append(\"name\", formState.inputs.name.value);\n\t\t\tformData.append(\"email\", formState.inputs.email.value);\n\t\t\tformData.append(\"password\", formState.inputs.password.value);\n\t\t\tformData.append(\"image\", formState.inputs.image.value);\n\t\t\ttry {\n\t\t\t\tconst respData = await sendRequest(\n\t\t\t\t\tprocess.env.REACT_APP_BACKEND_API_URL + \"/users/register\",\n\t\t\t\t\t\"POST\",\n\t\t\t\t\tundefined,\n\t\t\t\t\tformData\n\t\t\t\t);\n\t\t\t\tauthContext.login(respData.data.userId, respData.data.token);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<ErrorModal error={error} onCancel={clearError} />\n\t\t\t{isLoading && <Spinner asOverlay />}\n\t\t\t<form className=\"form auth-form\" onSubmit={submitHandler}>\n\t\t\t\t<h2>{isLoginMode ? \"Login\" : \"Register\"}</h2>\n\t\t\t\t<hr />\n\t\t\t\t{!isLoginMode && (\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\tlabel=\"Your Name\"\n\t\t\t\t\t\tvalidators={[Validators.required()]}\n\t\t\t\t\t\tonInput={inputHandler}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<Input\n\t\t\t\t\ttype=\"email\"\n\t\t\t\t\tname=\"email\"\n\t\t\t\t\tlabel=\"E-mail\"\n\t\t\t\t\tvalidators={[Validators.email()]}\n\t\t\t\t\tonInput={inputHandler}\n\t\t\t\t/>\n\t\t\t\t<Input\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tname=\"password\"\n\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\tvalidators={[Validators.minLength(6)]}\n\t\t\t\t\tonInput={inputHandler}\n\t\t\t\t/>\n\t\t\t\t{!isLoginMode && (\n\t\t\t\t\t<ImagePicker name=\"image\" center onInput={inputHandler} />\n\t\t\t\t)}\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tdisabled={!formState.isValid}\n\t\t\t\t\tstyle={{ marginTop: \"1.5rem\" }}\n\t\t\t\t>\n\t\t\t\t\t{isLoginMode ? \"LOGIN\" : \"REGISTER\"}\n\t\t\t\t</Button>\n\t\t\t\t<br />\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tinverse\n\t\t\t\t\tclassName=\"switch-btn\"\n\t\t\t\t\tonClick={switchMode}\n\t\t\t\t>\n\t\t\t\t\tSWITCH TO {isLoginMode ? \"REGISTER\" : \"LOGIN\"}\n\t\t\t\t</Button>\n\t\t\t</form>\n\t\t</React.Fragment>\n\t);\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"./Button\";\nimport \"./ImagePicker.css\";\n\nexport default function ImagePicker(props) {\n\tconst [imageFile, setImageFile] = useState(null);\n\tconst [previewUrl, setPreviewUrl] = useState(null);\n\tconst [isValid, setIsValid] = useState(false);\n\tconst [isTouched, setIsTouched] = useState(false);\n\tconst filePickerRef = useRef();\n\n\t// Generate preview\n\tuseEffect(() => {\n\t\tif (!imageFile) return;\n\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.onload = () => {\n\t\t\tsetPreviewUrl(fileReader.result);\n\t\t};\n\t\tfileReader.readAsDataURL(imageFile);\n\t}, [imageFile]);\n\n\tfunction pickImageHandler(event) {\n\t\tlet _imageFile = imageFile;\n\t\tlet _isValid = isValid;\n\t\tif (event.target.files && event.target.files.length === 1) {\n\t\t\t_imageFile = event.target.files[0];\n\t\t\t_isValid = true;\n\t\t} else {\n\t\t\t_isValid = false;\n\t\t}\n\t\tsetImageFile(_imageFile);\n\t\tsetIsValid(_isValid);\n\t\tsetIsTouched(true);\n\t\tprops.onInput(props.name, _imageFile, _isValid);\n\t}\n\n\treturn (\n\t\t<div className=\"form-control\">\n\t\t\t<input\n\t\t\t\ttype=\"file\"\n\t\t\t\taccept=\".jpg,.jpeg,.png\"\n\t\t\t\tname={props.name}\n\t\t\t\tstyle={{ display: \"none\" }}\n\t\t\t\tref={filePickerRef}\n\t\t\t\tonChange={pickImageHandler}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tclassName={`image-picker ${props.center && \"center\"} ${\n\t\t\t\t\t!isValid && isTouched && \"image-picker--invalid\"\n\t\t\t\t}`}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"image-picker__preview\"\n\t\t\t\t\tstyle={props.previewWidth ? { width: props.previewWidth } : {}}\n\t\t\t\t>\n\t\t\t\t\t{previewUrl ? (\n\t\t\t\t\t\t<img src={previewUrl} alt=\"Preview\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<strong>Please pick an image.</strong>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<Button type=\"button\" onClick={() => filePickerRef.current.click()}>\n\t\t\t\t\tPICK IMAGE\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n"],"sourceRoot":""}